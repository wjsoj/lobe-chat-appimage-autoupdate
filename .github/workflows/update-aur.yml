name: Update AUR Package

on:
  # 更频繁的定时检查来快速响应新release
  schedule:
  - cron: '0 */10 * * *' # 每10小时检查一次

  workflow_dispatch: # 允许手动触发
    inputs:
      force_update:
        description: '强制更新（忽略版本检查）'
        required: false
        default: false
        type: boolean

jobs:
  check-and-find:
    runs-on: ubuntu-latest
    outputs:
      should_update: ${{ steps.check.outputs.should_update }}
      latest_version: ${{ steps.check.outputs.latest_version }}
      appimage_url: ${{ steps.check.outputs.appimage_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for updates and find available version
        id: check
        run: |
          echo "🔍 检查LobeChat新版本..."
          
          # 检查是否强制更新
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "🔄 强制更新模式：忽略当前版本对比，回溯查找最近可用的 AppImage"
          fi
          
          # 查找有构建产物的最新版本
          echo "🔍 查找有构建产物的最新版本..."
          
          # 获取最近20个releases
          releases_json=$(curl -sSL "https://api.github.com/repos/lobehub/lobe-chat/releases?per_page=20")
          
          # 查找第一个有AppImage的版本
          latest_available_version=""
          appimage_url=""
          
          # 提取所有tag名称到数组
          tag_list=$(echo "$releases_json" | grep '"tag_name":' | sed 's/.*"tag_name": *"\([^"]*\)".*/\1/')
          
          # 逐个检查每个版本
          for tag_name in $tag_list; do
            if [ -z "$tag_name" ]; then
              continue
            fi
            
            version=${tag_name#v}  # 移除v前缀
            echo "📦 检查版本: $version"
            
            # 获取该版本的详细信息
            release_json=$(curl -sSL "https://api.github.com/repos/lobehub/lobe-chat/releases/tags/$tag_name")
            
            # 查找AppImage asset - 更精确的匹配模式
            appimage_asset=$(echo "$release_json" | grep -o '"browser_download_url": *"[^"]*\.AppImage"' | sed 's/.*"browser_download_url": *"\([^"]*\)".*/\1/' | head -1)
            
            if [ -n "$appimage_asset" ]; then
              # 验证文件确实可以下载
              echo "🔍 验证AppImage: $appimage_asset"
              # 跟随 3xx 重定向并仅验证可达性
              if curl -sIL --retry 2 --fail "$appimage_asset" -o /dev/null; then
                echo "✅ 找到可用的构建产物: $version"
                echo "📁 AppImage URL: $appimage_asset"
                latest_available_version="$version"
                appimage_url="$appimage_asset"
                break
              else
                echo "⚠️  版本 $version 的AppImage无法访问"
              fi
            else
              echo "⚠️  版本 $version 没有AppImage文件"
            fi
          done
          
          if [ -z "$latest_available_version" ]; then
            echo "❌ 没有找到任何可用的构建产物"
            echo "should_update=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "📦 可用版本: $latest_available_version"
          echo "📁 AppImage URL: $appimage_url"
          echo "latest_version=$latest_available_version" >> $GITHUB_OUTPUT
          echo "appimage_url=$appimage_url" >> $GITHUB_OUTPUT
          
          # 检查当前版本（强制更新时跳过）
          if [ "${{ github.event.inputs.force_update }}" != "true" ] && [ -f "PKGBUILD" ]; then
            current_version=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
            echo "📋 当前版本: $current_version"
            
            if [ "$latest_available_version" = "$current_version" ]; then
              echo "✅ 版本已是最新"
              echo "should_update=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "🆕 发现新版本需要更新"
          echo "should_update=true" >> $GITHUB_OUTPUT

  update:
    needs: check-and-find
    runs-on: ubuntu-latest
    if: needs.check-and-find.outputs.should_update == 'true'
    env:
      AUR_REPO: lobe-chat-appimage
      GIT_AUTHOR_NAME: wjsoj
      GIT_AUTHOR_EMAIL: wjs@wjsphy.top
      GIT_COMMITTER_NAME: wjsoj
      GIT_COMMITTER_EMAIL: wjs@wjsphy.top
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download AppImage & LICENSE
        id: download
        run: |
          version="${{ needs.check-and-find.outputs.latest_version }}"
          appimage_url="${{ needs.check-and-find.outputs.appimage_url }}"
          if [ -z "$appimage_url" ]; then
            echo "❌ appimage_url 为空，停止执行以避免下载错误。"
            exit 1
          fi
          
          # Clean any existing downloads to avoid cache issues
          rm -f LobeHub-Beta-*.AppImage LICENSE lobe-chat.png
          
          # Download with cache-busting and retry logic
          echo "Downloading AppImage..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "$appimage_url" -o "LobeHub-Beta-${version}.AppImage"
          echo "Downloading LICENSE..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "https://raw.githubusercontent.com/lobehub/lobe-chat/v${version}/LICENSE" -o LICENSE
          echo "Downloading icon..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "https://raw.githubusercontent.com/lobehub/lobe-chat/v${version}/apps/desktop/resources/tray.png" -o lobe-chat.png
          
          # Verify downloads completed
          ls -la "LobeHub-Beta-${version}.AppImage" LICENSE lobe-chat.png
          
          # Calculate checksums
          sha_appimage=$(sha256sum "LobeHub-Beta-${version}.AppImage" | awk '{print $1}')
          sha_license=$(sha256sum LICENSE | awk '{print $1}')
          sha_icon=$(sha256sum lobe-chat.png | awk '{print $1}')
          
          echo "AppImage SHA256: $sha_appimage"
          echo "LICENSE SHA256: $sha_license"
          echo "Icon SHA256: $sha_icon"
          
          echo "sha_appimage=$sha_appimage" >> $GITHUB_OUTPUT
          echo "sha_license=$sha_license" >> $GITHUB_OUTPUT
          echo "sha_icon=$sha_icon" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD
        run: |
          ver="${{ needs.check-and-find.outputs.latest_version }}"
          sha_appimage="${{ steps.download.outputs.sha_appimage }}"
          sha_license="${{ steps.download.outputs.sha_license }}"
          sha_icon="${{ steps.download.outputs.sha_icon }}"
          
          echo "Updating PKGBUILD with version $ver..."
          
          # Update version
          sed -i "s/^pkgver=.*/pkgver=$ver/" PKGBUILD
          
          # Replace checksums by specific placeholders to avoid conflicts
          sed -i "s/APPIMAGE_SHA256/$sha_appimage/" PKGBUILD
          sed -i "s/LICENSE_SHA256/$sha_license/" PKGBUILD  
          sed -i "s/ICON_SHA256/$sha_icon/" PKGBUILD
          
          echo "Updated PKGBUILD contents:"
          grep -E 'pkgver=|sha256sums' -A 3 PKGBUILD

      - name: Generate .SRCINFO
        run: |
          docker run --rm -v "$PWD":/work -w /work archlinux:base-devel bash -lc "pacman -Sy --noconfirm base-devel git && useradd -m builder && chown -R builder:builder /work && su builder -c 'makepkg --printsrcinfo > .SRCINFO'"
          sudo chown -R $(whoami):$(whoami) .

      - name: Configure AUR SSH key
        run: |
          install -m 700 -d ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >> ~/.ssh/config <<EOF
          Host aur.archlinux.org
            User aur
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking accept-new
          EOF

      - name: Push to AUR
        run: |
          # Configure git globally to avoid .git/config permission issues
          git config --global user.name "$GIT_AUTHOR_NAME"
          git config --global user.email "$GIT_AUTHOR_EMAIL"
          git config --global --add safe.directory "*"
          
          # Clone AUR repo to separate directory to avoid subdirectory conflicts
          git clone ssh://aur@aur.archlinux.org/${AUR_REPO}.git aur-repo
          cd aur-repo
          
          cp ../PKGBUILD .
          cp ../.SRCINFO .
          cp ../LICENSE .
          
          git add PKGBUILD .SRCINFO LICENSE
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update to ${{ needs.check-and-find.outputs.latest_version }}"
            git push origin master
          fi
