name: Update AUR package

on:
  schedule:
    - cron: '0 20 * * *' # daily 02:17 UTC
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      AUR_REPO: lobe-chat-appimage
      GIT_AUTHOR_NAME: wjsoj
      GIT_AUTHOR_EMAIL: wjs@wjsphy.top
      GIT_COMMITTER_NAME: wjsoj
      GIT_COMMITTER_EMAIL: wjs@wjsphy.top
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest release metadata
        id: rel
        run: |
          api_url="https://api.github.com/repos/lobehub/lobe-chat/releases/latest"
          json=$(curl -sSL "$api_url")
          # Parse JSON with shell instead of jq to avoid dependencies
          version=$(echo "$json" | sed -n 's/.*"tag_name": *"\([^"]*\)".*/\1/p' | sed 's/^v//')
          appimage_asset=$(echo "$json" | grep -o '"browser_download_url": *"[^"]*LobeHub-Beta-[^"]*\.AppImage"' | sed 's/.*"browser_download_url": *"\([^"]*\)".*/\1/')
          if [ -z "$appimage_asset" ]; then
            echo "No AppImage asset found" >&2
            exit 1
          fi
          echo "Latest version: $version"
          echo "AppImage URL: $appimage_asset"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "appimage_url=$appimage_asset" >> $GITHUB_OUTPUT

      - name: Skip if already up to date
        id: checkver
        run: |
          current=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          if [ "$current" = "${{ steps.rel.outputs.version }}" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
            echo "Package already at latest version $current";
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early
        if: steps.checkver.outputs.up_to_date == 'true'
        run: echo "Already latest."

      - name: Download AppImage & LICENSE
        id: download
        if: steps.checkver.outputs.up_to_date != 'true'
        run: |
          # Clean any existing downloads to avoid cache issues
          rm -f LobeHub-Beta-*.AppImage LICENSE lobe-chat.png
          
          # Download with cache-busting and retry logic
          echo "Downloading AppImage..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "${{ steps.rel.outputs.appimage_url }}" -o LobeHub-Beta-${{ steps.rel.outputs.version }}.AppImage
          echo "Downloading LICENSE..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "https://raw.githubusercontent.com/lobehub/lobe-chat/v${{ steps.rel.outputs.version }}/LICENSE" -o LICENSE
          echo "Downloading icon..."
          curl -L --retry 3 --fail -H "Cache-Control: no-cache" "https://raw.githubusercontent.com/lobehub/lobe-chat/v${{ steps.rel.outputs.version }}/apps/desktop/resources/tray.png" -o lobe-chat.png
          
          # Verify downloads completed
          ls -la LobeHub-Beta-${{ steps.rel.outputs.version }}.AppImage LICENSE lobe-chat.png
          
          # Calculate checksums
          sha_appimage=$(sha256sum LobeHub-Beta-${{ steps.rel.outputs.version }}.AppImage | awk '{print $1}')
          sha_license=$(sha256sum LICENSE | awk '{print $1}')
          sha_icon=$(sha256sum lobe-chat.png | awk '{print $1}')
          
          echo "AppImage SHA256: $sha_appimage"
          echo "LICENSE SHA256: $sha_license"
          echo "Icon SHA256: $sha_icon"
          
          echo "sha_appimage=$sha_appimage" >> $GITHUB_OUTPUT
          echo "sha_license=$sha_license" >> $GITHUB_OUTPUT
          echo "sha_icon=$sha_icon" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD
        if: steps.checkver.outputs.up_to_date != 'true'
        run: |
          ver=${{ steps.rel.outputs.version }}
          sha_appimage=${{ steps.download.outputs.sha_appimage }}
          sha_license=${{ steps.download.outputs.sha_license }}
          sha_icon=${{ steps.download.outputs.sha_icon }}
          
          echo "Updating PKGBUILD with version $ver..."
          
          # Update version
          sed -i "s/^pkgver=.*/pkgver=$ver/" PKGBUILD
          
          # Replace checksums by specific placeholders to avoid conflicts
          sed -i "s/APPIMAGE_SHA256/'$sha_appimage'/" PKGBUILD
          sed -i "s/LICENSE_SHA256/'$sha_license'/" PKGBUILD  
          sed -i "s/ICON_SHA256/'$sha_icon'/" PKGBUILD
          
          echo "Updated PKGBUILD contents:"
          grep -E 'pkgver=|sha256sums' -A 3 PKGBUILD

      - name: Generate .SRCINFO
        if: steps.checkver.outputs.up_to_date != 'true'
        run: |
          docker run --rm -v "$PWD":/work -w /work archlinux:base-devel bash -lc "pacman -Sy --noconfirm base-devel git && useradd -m builder && chown -R builder:builder /work && su builder -c 'makepkg --printsrcinfo > .SRCINFO'"
          sudo chown -R $(whoami):$(whoami) .

      - name: Configure AUR SSH key
        if: steps.checkver.outputs.up_to_date != 'true'
        run: |
          install -m 700 -d ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >> ~/.ssh/config <<EOF
          Host aur.archlinux.org
            User aur
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking accept-new
          EOF

      - name: Push to AUR
        if: steps.checkver.outputs.up_to_date != 'true'
        run: |
          # Configure git globally to avoid .git/config permission issues
          git config --global user.name "$GIT_AUTHOR_NAME"
          git config --global user.email "$GIT_AUTHOR_EMAIL"
          git config --global --add safe.directory "*"
          
          # Clone AUR repo to separate directory to avoid subdirectory conflicts
          git clone ssh://aur@aur.archlinux.org/${AUR_REPO}.git aur-repo
          cd aur-repo
          
          cp ../PKGBUILD .
          cp ../.SRCINFO .
          cp ../LICENSE .
          
          git add PKGBUILD .SRCINFO LICENSE
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update to ${{ steps.rel.outputs.version }}"
            git push origin master
          fi
